{"ast":null,"code":"import React,{useRef,useEffect,useState}from\"react\";import mapboxgl from'mapbox-gl';import ClickableMarker from\"./CompanyFinderAPI/ClickableMarker\";import{jsx as _jsx}from\"react/jsx-runtime\";const Map=({OnCenterChange,Lat,Lng,Markers,OnMarkerClick})=>{const[Width,setWidth]=useState(document.documentElement.clientWidth);const[Height,setHeight]=useState(document.documentElement.clientHeight);const[Companys,setCompanys]=useState([]);const map=useRef();// let map;\nconst mapContainer=useRef(null);useEffect(()=>{const setWindowSize=()=>{setWidth(window.outerWidth);setHeight(window.outerHeight);};window.addEventListener(\"resize\",setWindowSize);return()=>{window.removeEventListener(\"resize\",setWindowSize);};});useEffect(()=>{mapboxgl.accessToken=\"pk.eyJ1IjoiZGVubmlzY2hhbmc5MjgiLCJhIjoiY2tzanRjanRiMXpsbDJvbnVxdTgxNHh4byJ9.AcPK9uy9CBN1DUX8g6G-_Q\";map.current=new mapboxgl.Map({container:mapContainer.current,style:\"mapbox://styles/mapbox/streets-v11\",// style URL\nzoom:18// starting zoom\n});map.current.setCenter([Lng,Lat]);map.current.on(\"move\",()=>{OnCenterChange(map.current.getCenter().lat,map.current.getCenter().lng);});},[]);useEffect(()=>{console.log(\"Markers update\");if(Markers===[]||Companys===[]){return;}else{Companys.forEach(Company=>{Company.remove();});setCompanys(Markers.map(Company=>{return new ClickableMarker({color:\"#FF0000\",anchor:'bottom',draggable:false}).setLngLat([Company.Lng,Company.Lat]).addTo(map.current).onClick(()=>{OnMarkerClick(Company);});}));}},[Markers]);// )\nreturn/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"div\",{style:{height:Height,Width:Width},ref:mapContainer,className:\"map-container\"})});};export default Map;","map":{"version":3,"sources":["/Users/changdennis/competition_2020/src/Components/Map.js"],"names":["React","useRef","useEffect","useState","mapboxgl","ClickableMarker","Map","OnCenterChange","Lat","Lng","Markers","OnMarkerClick","Width","setWidth","document","documentElement","clientWidth","Height","setHeight","clientHeight","Companys","setCompanys","map","mapContainer","setWindowSize","window","outerWidth","outerHeight","addEventListener","removeEventListener","accessToken","current","container","style","zoom","setCenter","on","getCenter","lat","lng","console","log","forEach","Company","remove","color","anchor","draggable","setLngLat","addTo","onClick","height"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,MAAhB,CAAwBC,SAAxB,CAAmCC,QAAnC,KAAmD,OAAnD,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,MAAOC,CAAAA,eAAP,KAA4B,oCAA5B,C,2CAEA,KAAMC,CAAAA,GAAG,CAAG,CAAC,CAAEC,cAAF,CAAkBC,GAAlB,CAAuBC,GAAvB,CAA4BC,OAA5B,CAAqCC,aAArC,CAAD,GAA0D,CACpE,KAAM,CAACC,KAAD,CAAQC,QAAR,EAAoBV,QAAQ,CAACW,QAAQ,CAACC,eAAT,CAAyBC,WAA1B,CAAlC,CACA,KAAM,CAACC,MAAD,CAASC,SAAT,EAAsBf,QAAQ,CAACW,QAAQ,CAACC,eAAT,CAAyBI,YAA1B,CAApC,CACA,KAAM,CAACC,QAAD,CAAWC,WAAX,EAA0BlB,QAAQ,CAAC,EAAD,CAAxC,CACA,KAAMmB,CAAAA,GAAG,CAAGrB,MAAM,EAAlB,CAEA;AACA,KAAMsB,CAAAA,YAAY,CAAGtB,MAAM,CAAC,IAAD,CAA3B,CAEAC,SAAS,CAAC,IAAM,CACd,KAAMsB,CAAAA,aAAa,CAAG,IAAM,CAC1BX,QAAQ,CAACY,MAAM,CAACC,UAAR,CAAR,CACAR,SAAS,CAACO,MAAM,CAACE,WAAR,CAAT,CACD,CAHD,CAIAF,MAAM,CAACG,gBAAP,CAAwB,QAAxB,CAAkCJ,aAAlC,EACA,MAAO,IAAM,CACXC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,CAAqCL,aAArC,EACD,CAFD,CAGD,CATQ,CAAT,CAWAtB,SAAS,CAAC,IAAM,CACdE,QAAQ,CAAC0B,WAAT,CACE,oGADF,CAGAR,GAAG,CAACS,OAAJ,CAAc,GAAI3B,CAAAA,QAAQ,CAACE,GAAb,CAAiB,CAC7B0B,SAAS,CAAET,YAAY,CAACQ,OADK,CAE7BE,KAAK,CAAE,oCAFsB,CAEgB;AAC7CC,IAAI,CAAE,EAAG;AAHoB,CAAjB,CAAd,CAKAZ,GAAG,CAACS,OAAJ,CAAYI,SAAZ,CAAsB,CAAC1B,GAAD,CAAMD,GAAN,CAAtB,EACAc,GAAG,CAACS,OAAJ,CAAYK,EAAZ,CAAe,MAAf,CAAuB,IAAM,CAC3B7B,cAAc,CAACe,GAAG,CAACS,OAAJ,CAAYM,SAAZ,GAAwBC,GAAzB,CAA8BhB,GAAG,CAACS,OAAJ,CAAYM,SAAZ,GAAwBE,GAAtD,CAAd,CACD,CAFD,EAGD,CAbQ,CAaN,EAbM,CAAT,CAgBArC,SAAS,CAAC,IAAM,CACdsC,OAAO,CAACC,GAAR,CAAY,gBAAZ,EACA,GAAI/B,OAAO,GAAK,EAAZ,EAAkBU,QAAQ,GAAK,EAAnC,CAAuC,CACrC,OACD,CAFD,IAEO,CACLA,QAAQ,CAACsB,OAAT,CAAiBC,OAAO,EAAI,CAC1BA,OAAO,CAACC,MAAR,GACD,CAFD,EAGAvB,WAAW,CACTX,OAAO,CAACY,GAAR,CAAaqB,OAAD,EAAa,CACvB,MAAO,IAAItC,CAAAA,eAAJ,CAAoB,CACzBwC,KAAK,CAAE,SADkB,CAEzBC,MAAM,CAAE,QAFiB,CAGzBC,SAAS,CAAE,KAHc,CAApB,EAIJC,SAJI,CAIM,CAACL,OAAO,CAAClC,GAAT,CAAckC,OAAO,CAACnC,GAAtB,CAJN,EAKJyC,KALI,CAKE3B,GAAG,CAACS,OALN,EAMJmB,OANI,CAMI,IAAM,CAAEvC,aAAa,CAACgC,OAAD,CAAb,CAAwB,CANpC,CAAP,CAOD,CARD,CADS,CAAX,CAWD,CACF,CApBQ,CAoBN,CAACjC,OAAD,CApBM,CAAT,CAqBA;AAEA,mBACE,kCACE,YAAK,KAAK,CAAE,CACVyC,MAAM,CAAElC,MADE,CAEVL,KAAK,CAAEA,KAFG,CAAZ,CAIE,GAAG,CAAEW,YAJP,CAIqB,SAAS,CAAC,eAJ/B,EADF,EADF,CASD,CApED,CAsEA,cAAejB,CAAAA,GAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport mapboxgl from 'mapbox-gl';\nimport ClickableMarker from \"./CompanyFinderAPI/ClickableMarker\";\n\nconst Map = ({ OnCenterChange, Lat, Lng, Markers, OnMarkerClick }) => {\n  const [Width, setWidth] = useState(document.documentElement.clientWidth);\n  const [Height, setHeight] = useState(document.documentElement.clientHeight);\n  const [Companys, setCompanys] = useState([]);\n  const map = useRef();\n\n  // let map;\n  const mapContainer = useRef(null);\n\n  useEffect(() => {\n    const setWindowSize = () => {\n      setWidth(window.outerWidth);\n      setHeight(window.outerHeight);\n    };\n    window.addEventListener(\"resize\", setWindowSize);\n    return () => {\n      window.removeEventListener(\"resize\", setWindowSize);\n    };\n  });\n\n  useEffect(() => {\n    mapboxgl.accessToken =\n      \"pk.eyJ1IjoiZGVubmlzY2hhbmc5MjgiLCJhIjoiY2tzanRjanRiMXpsbDJvbnVxdTgxNHh4byJ9.AcPK9uy9CBN1DUX8g6G-_Q\";\n\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/streets-v11\", // style URL\n      zoom: 18 // starting zoom\n    });\n    map.current.setCenter([Lng, Lat]);\n    map.current.on(\"move\", () => {\n      OnCenterChange(map.current.getCenter().lat, map.current.getCenter().lng);\n    });\n  }, []);\n\n\n  useEffect(() => {\n    console.log(\"Markers update\")\n    if (Markers === [] || Companys === []) {\n      return\n    } else {\n      Companys.forEach(Company => {\n        Company.remove();\n      });\n      setCompanys(\n        Markers.map((Company) => {\n          return new ClickableMarker({\n            color: \"#FF0000\",\n            anchor: 'bottom',\n            draggable: false\n          }).setLngLat([Company.Lng, Company.Lat])\n            .addTo(map.current)\n            .onClick(() => { OnMarkerClick(Company) });\n        })\n      )\n    }\n  }, [Markers]);\n  // )\n\n  return (\n    <div>\n      <div style={{\n        height: Height,\n        Width: Width\n      }}\n        ref={mapContainer} className=\"map-container\" />\n    </div>\n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}