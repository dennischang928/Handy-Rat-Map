{"ast":null,"code":"var _jsxFileName = \"/Users/changdennis/competition_2020/src/Components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Map from \"./Map\";\nimport Spinner from \"./Loading_Spinner\";\nimport Pointer from \"../Pointer/Pointer\";\nimport AddButton from \"../Pointer/AddBTN\";\nimport Place_Definer from \"../Place_Define/Place_Definer\";\nimport { Card } from \"semantic-ui-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [CurrentLng, setCurrentLng] = useState(null);\n  const [CurrentLat, setCurrentLat] = useState(null);\n  const [Address, setAddress] = useState(null);\n  const [DefinerVis, setDefinerVis] = useState(false);\n  const [Error, setError] = useState(null);\n  const [Card_State, setCard_State] = useState({\n    id: \"\",\n    ShopName: \"\",\n    ShopType: \"\",\n    ImageSrc: []\n  });\n  console.log(\"App Rendering\");\n\n  const OnPlace_DefineChange = CardState => {\n    setCard_State(CardState);\n    console.log(\"OnPlace_DefineChangeCalled\");\n    console.log(CardState.ImageSrc);\n  };\n\n  const setPosition = () => {\n    window.navigator.geolocation.getCurrentPosition(position => {\n      setCurrentLng(position.coords.longitude);\n      setCurrentLat(position.coords.latitude);\n    }, err => {\n      setError(err.message);\n    });\n  };\n\n  useEffect(() => {\n    setPosition();\n  }, []); // console.log(`AppCardState:\");\n  // useEffect(() => {\n  //   console.log(Card_State);\n  //   // console.log(`Lat:${CurrentLat}`);\n  //   // console.log(`Lng:${CurrentLng}`);\n  // }, [Card_State]);\n\n  const OnMapCenterChange = (Lat, Lng) => {\n    setCurrentLng(Lng);\n    setCurrentLat(Lat);\n  };\n\n  const GetDetailAddress = async (Lat, Lng) => {\n    // const reponse = await geocode.get(\"\", {\n    //   params: {\n    //     latlng: `${Lat},${Lng}`\n    //   }\n    // });\n    // return reponse.data.results[0].formatted_address;\n    return \"\";\n  };\n\n  const AddItem = () => {\n    setAddress(GetDetailAddress(CurrentLat, CurrentLng));\n    setDefinerVis(true);\n  };\n\n  const MapInitialize = () => {\n    // if (CurrentLng !== null && CurrentLat !== null) {\n    // initialized\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Place_Definer, {\n        visible: true,\n        Card_State: Card_State,\n        onChange: OnPlace_DefineChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this); // } else {\n    // return <Spinner message={Error} />;\n    // }\n  };\n\n  return MapInitialize();\n};\n\n_s(App, \"hOD6CbZ9VOU18xwJzyVOFNkT2oU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/changdennis/competition_2020/src/Components/App.js"],"names":["React","useEffect","useState","Map","Spinner","Pointer","AddButton","Place_Definer","Card","App","CurrentLng","setCurrentLng","CurrentLat","setCurrentLat","Address","setAddress","DefinerVis","setDefinerVis","Error","setError","Card_State","setCard_State","id","ShopName","ShopType","ImageSrc","console","log","OnPlace_DefineChange","CardState","setPosition","window","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","err","message","OnMapCenterChange","Lat","Lng","GetDetailAddress","AddItem","MapInitialize"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Map from \"./Map\";\nimport Spinner from \"./Loading_Spinner\";\nimport Pointer from \"../Pointer/Pointer\";\nimport AddButton from \"../Pointer/AddBTN\";\nimport Place_Definer from \"../Place_Define/Place_Definer\";\nimport { Card } from \"semantic-ui-react\";\n\nconst App = () => {\n  const [CurrentLng, setCurrentLng] = useState(null);\n  const [CurrentLat, setCurrentLat] = useState(null);\n  const [Address, setAddress] = useState(null);\n  const [DefinerVis, setDefinerVis] = useState(false);\n  const [Error, setError] = useState(null);\n  const [Card_State, setCard_State] = useState({\n    id: \"\",\n    ShopName: \"\",\n    ShopType: \"\",\n    ImageSrc: []\n  });\n  console.log(\"App Rendering\");\n\n  const OnPlace_DefineChange = CardState => {\n    setCard_State(CardState);\n    console.log(\"OnPlace_DefineChangeCalled\");\n    console.log(CardState.ImageSrc);\n  };\n\n  const setPosition = () => {\n    window.navigator.geolocation.getCurrentPosition(\n      position => {\n        setCurrentLng(position.coords.longitude);\n        setCurrentLat(position.coords.latitude);\n      },\n      err => {\n        setError(err.message);\n      }\n    );\n  };\n\n  useEffect(() => {\n    setPosition();\n  }, []);\n  // console.log(`AppCardState:\");\n  // useEffect(() => {\n  //   console.log(Card_State);\n  //   // console.log(`Lat:${CurrentLat}`);\n  //   // console.log(`Lng:${CurrentLng}`);\n  // }, [Card_State]);\n\n  const OnMapCenterChange = (Lat, Lng) => {\n    setCurrentLng(Lng);\n    setCurrentLat(Lat);\n  };\n\n  const GetDetailAddress = async (Lat, Lng) => {\n    // const reponse = await geocode.get(\"\", {\n    //   params: {\n    //     latlng: `${Lat},${Lng}`\n    //   }\n    // });\n    // return reponse.data.results[0].formatted_address;\n    return \"\";\n  };\n\n  const AddItem = () => {\n    setAddress(GetDetailAddress(CurrentLat, CurrentLng));\n    setDefinerVis(true);\n  };\n\n  const MapInitialize = () => {\n    // if (CurrentLng !== null && CurrentLat !== null) {\n    // initialized\n    return (\n      <div>\n        {/* <Map\n            Lat={CurrentLat}\n            Lng={CurrentLng}\n            OnCenterChange={OnMapCenterChange}\n          /> */}\n        {/* <Pointer /> */}\n        {/* <AddButton OnClick={AddItem} /> */}\n        <Place_Definer\n          visible={true}\n          Card_State={Card_State}\n          onChange={OnPlace_DefineChange}\n        />\n      </div>\n    );\n    // } else {\n    // return <Spinner message={Error} />;\n    // }\n  };\n\n  return MapInitialize();\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}