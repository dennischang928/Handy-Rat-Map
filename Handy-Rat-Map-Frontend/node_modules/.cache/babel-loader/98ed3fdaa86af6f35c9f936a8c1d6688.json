{"ast":null,"code":"var _jsxFileName = \"/Users/changdennis/competition_2020/src/Components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport CompanyApi from \"../CompanyApi\";\nimport geocode from \"../Decode_Api/geocode\";\nimport Finder from \"./CompanyFinderAPI/Finder\";\nimport Map from \"./Map\";\nimport Spinner from \"./Loading_Spinner\";\nimport Pointer from \"../Pointer/Pointer\";\nimport AddButton from \"../Pointer/AddBTN\";\nimport Place_Definer from \"../Place_Define/Place_Definer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [CurrentLng, setCurrentLng] = useState(null);\n  const [CurrentLat, setCurrentLat] = useState(null);\n  const [Address, setAddress] = useState(\"\");\n  const [DefinerVis, setDefinerVis] = useState(false);\n  const [CompanyCreateState, setCompanyCreateState] = useState(0); //Not submit:0, submiting:1, Sucess:2, Fail:3\n\n  const [DefinerMessage, setDefinerMessage] = useState(null);\n  const [SurroundingCompany, setSurroundingCompany] = useState([]);\n  const [Error, setError] = useState(null);\n  var CompanyClicked = {\n    Lat: null,\n    Lng: null,\n    ShopDetail: null,\n    ShopType: null,\n    ShopDescription: null,\n    Addr: null,\n    _id: null,\n    ImageSrc: null\n  };\n\n  const setMarkers = async () => {\n    const Response = await Finder.get(\"/SurroundingCompany\", {\n      params: {\n        Lng: CurrentLng,\n        Lat: CurrentLat\n      }\n    });\n\n    if (SurroundingCompany.length !== Response.data.length) {\n      setSurroundingCompany(Response.data);\n    }\n  };\n\n  useEffect(() => {\n    if (DefinerVis === true) {\n      setCompanyCreateState(1);\n      const TimeoutID = setTimeout(() => {\n        GetAndSetDetailAddress(CurrentLat, CurrentLng);\n        setCompanyCreateState(0);\n      }, 800);\n      return () => {\n        clearTimeout(TimeoutID);\n      };\n    }\n  }, [CurrentLat, CurrentLng, DefinerVis]);\n  useEffect(() => {\n    const TimeoutID = setTimeout(setMarkers, 200);\n    return () => {\n      clearTimeout(TimeoutID);\n    };\n  }, [CurrentLat, CurrentLng]);\n  useEffect(setMarkers, []);\n  useEffect(() => {\n    setPosition();\n  }, []);\n\n  const setPosition = () => {\n    window.navigator.geolocation.getCurrentPosition(position => {\n      setCurrentLng(position.coords.longitude);\n      setCurrentLat(position.coords.latitude);\n    }, err => {\n      setError(err.message);\n    });\n  };\n\n  const OnMapCenterChange = (Lat, Lng) => {\n    setCurrentLng(Lng);\n    setCurrentLat(Lat);\n  };\n\n  const OnPlaceDefinerSubmit = async ShopDetail => {\n    setCompanyCreateState(1);\n\n    try {\n      const response = await CompanyApi.post(\"/Company/CreateCompany\", ShopDetail);\n      setCompanyCreateState(2);\n    } catch (err) {\n      setCompanyCreateState(3);\n      setDefinerMessage(err.message);\n    }\n\n    setTimeout(() => {\n      setMarkers();\n      setCompanyCreateState(0);\n      setDefinerVis(false);\n      console.log(\"closed\");\n    }, 2000);\n  };\n\n  const GetAndSetDetailAddress = async (Lat, Lng) => {\n    const reponse = await geocode.get(\"\", {\n      params: {\n        latlng: `${Lat},${Lng}`\n      }\n    });\n    console.log(reponse.data.results[0].formatted_address.toString());\n    setAddress(reponse.data.results[0].formatted_address.toString());\n  };\n\n  const AddItem = () => {\n    setDefinerVis(true);\n  };\n\n  const OnMarkerClick = async e => {\n    const Response = await Finder.get(\"/GetCompanyImage\", {\n      params: {\n        id: e._id\n      }\n    });\n    CompanyClicked.Lat = e.Lat;\n    CompanyClicked.Lng = e.Lng;\n    CompanyClicked.ShopDetail = e.ShopDetail;\n    CompanyClicked.ShopType = e.ShopType;\n    CompanyClicked.ShopDescription = e.ShopDescription;\n    CompanyClicked.Addr = e.Addr;\n    CompanyClicked._id = e._id;\n    CompanyClicked.ImageSrc = Response.data.ImageSrc;\n    console.log(CompanyClicked);\n  };\n\n  const MapInitialize = () => {\n    if (CurrentLng !== null && CurrentLat !== null) {\n      // initialized\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Map, {\n          Lat: CurrentLat,\n          Lng: CurrentLng,\n          OnCenterChange: OnMapCenterChange,\n          Markers: SurroundingCompany,\n          OnMarkerClick: OnMarkerClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pointer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AddButton, {\n          OnClick: AddItem\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Place_Definer, {\n          CompanyCreateState: CompanyCreateState,\n          Address: Address,\n          Lat: CurrentLat,\n          Lng: CurrentLng,\n          visible: DefinerVis,\n          OnSumbit: OnPlaceDefinerSubmit,\n          OnClosed: () => {\n            setDefinerVis(false);\n          },\n          message: DefinerMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Spinner, {\n        message: Error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 14\n      }, this);\n    }\n  };\n\n  return MapInitialize();\n};\n\n_s(App, \"KQYhItNiF8UC8e3JsuJeUVUHbC4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/changdennis/competition_2020/src/Components/App.js"],"names":["React","useEffect","useState","CompanyApi","geocode","Finder","Map","Spinner","Pointer","AddButton","Place_Definer","App","CurrentLng","setCurrentLng","CurrentLat","setCurrentLat","Address","setAddress","DefinerVis","setDefinerVis","CompanyCreateState","setCompanyCreateState","DefinerMessage","setDefinerMessage","SurroundingCompany","setSurroundingCompany","Error","setError","CompanyClicked","Lat","Lng","ShopDetail","ShopType","ShopDescription","Addr","_id","ImageSrc","setMarkers","Response","get","params","length","data","TimeoutID","setTimeout","GetAndSetDetailAddress","clearTimeout","setPosition","window","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","err","message","OnMapCenterChange","OnPlaceDefinerSubmit","response","post","console","log","reponse","latlng","results","formatted_address","toString","AddItem","OnMarkerClick","e","id","MapInitialize"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport CompanyApi from \"../CompanyApi\";\nimport geocode from \"../Decode_Api/geocode\";\nimport Finder from \"./CompanyFinderAPI/Finder\";\n\nimport Map from \"./Map\";\nimport Spinner from \"./Loading_Spinner\";\nimport Pointer from \"../Pointer/Pointer\";\nimport AddButton from \"../Pointer/AddBTN\";\nimport Place_Definer from \"../Place_Define/Place_Definer\";\n\n\nconst App = () => {\n  const [CurrentLng, setCurrentLng] = useState(null);\n  const [CurrentLat, setCurrentLat] = useState(null);\n  const [Address, setAddress] = useState(\"\");\n  const [DefinerVis, setDefinerVis] = useState(false);\n  const [CompanyCreateState, setCompanyCreateState] = useState(0); //Not submit:0, submiting:1, Sucess:2, Fail:3\n  const [DefinerMessage, setDefinerMessage] = useState(null);\n  const [SurroundingCompany, setSurroundingCompany] = useState([]);\n  const [Error, setError] = useState(null);\n\n  var CompanyClicked = {\n    Lat: null,\n    Lng: null,\n    ShopDetail: null,\n    ShopType: null,\n    ShopDescription: null,\n    Addr: null,\n    _id: null,\n    ImageSrc: null\n  };\n\n  const setMarkers = async () => {\n    const Response = await Finder.get(\"/SurroundingCompany\", {\n      params: {\n        Lng: CurrentLng,\n        Lat: CurrentLat\n      }\n    })\n    if (SurroundingCompany.length !== Response.data.length) {\n      setSurroundingCompany(Response.data);\n    }\n  }\n\n  useEffect(() => {\n    if (DefinerVis === true) {\n      setCompanyCreateState(1);\n      const TimeoutID = setTimeout(() => {\n        GetAndSetDetailAddress(CurrentLat, CurrentLng);\n        setCompanyCreateState(0);\n      }, 800);\n      return () => {\n        clearTimeout(TimeoutID);\n      };\n    }\n  }, [CurrentLat, CurrentLng, DefinerVis])\n\n  useEffect(() => {\n    const TimeoutID = setTimeout(setMarkers, 200);\n    return () => {\n      clearTimeout(TimeoutID);\n    };\n  }, [CurrentLat, CurrentLng])\n\n  useEffect(setMarkers, [])\n\n  useEffect(() => { setPosition() }, [])\n\n\n\n  const setPosition = () => {\n    window.navigator.geolocation.getCurrentPosition(\n      position => {\n        setCurrentLng(position.coords.longitude);\n        setCurrentLat(position.coords.latitude);\n      },\n      err => {\n        setError(err.message);\n      }\n    );\n  };\n\n  const OnMapCenterChange = (Lat, Lng) => {\n    setCurrentLng(Lng);\n    setCurrentLat(Lat);\n  };\n\n  const OnPlaceDefinerSubmit = async (ShopDetail) => {\n    setCompanyCreateState(1);\n    try {\n      const response = await CompanyApi.post(\"/Company/CreateCompany\", ShopDetail)\n      setCompanyCreateState(2);\n    } catch (err) {\n      setCompanyCreateState(3);\n      setDefinerMessage(err.message);\n    }\n    setTimeout(() => {\n      setMarkers();\n      setCompanyCreateState(0);\n      setDefinerVis(false);\n      console.log(\"closed\");\n    }, 2000);\n  };\n\n  const GetAndSetDetailAddress = async (Lat, Lng) => {\n    const reponse = await geocode.get(\"\", {\n      params: {\n        latlng: `${Lat},${Lng}`\n      }\n    });\n    console.log(reponse.data.results[0].formatted_address.toString());\n\n    setAddress(reponse.data.results[0].formatted_address.toString());\n  };\n\n  const AddItem = () => {\n    setDefinerVis(true);\n  };\n\n  const OnMarkerClick = async (e) => {\n    const Response = await Finder.get(\"/GetCompanyImage\",\n      {\n        params: {\n          id: e._id\n        }\n      }\n    )\n    CompanyClicked.Lat = e.Lat;\n    CompanyClicked.Lng = e.Lng;\n    CompanyClicked.ShopDetail = e.ShopDetail;\n    CompanyClicked.ShopType = e.ShopType;\n    CompanyClicked.ShopDescription = e.ShopDescription;\n    CompanyClicked.Addr = e.Addr;\n    CompanyClicked._id = e._id;\n    CompanyClicked.ImageSrc = Response.data.ImageSrc;\n\n    console.log(CompanyClicked);\n  }\n\n  const MapInitialize = () => {\n    if (CurrentLng !== null && CurrentLat !== null) {\n      // initialized\n      return (\n        <div>\n          <Map\n            Lat={CurrentLat}\n            Lng={CurrentLng}\n            OnCenterChange={OnMapCenterChange}\n            Markers={SurroundingCompany}\n            OnMarkerClick={OnMarkerClick}\n          />\n          <Pointer />\n          <AddButton OnClick={AddItem} />\n          <Place_Definer\n            CompanyCreateState={CompanyCreateState}\n            Address={Address}\n            Lat={CurrentLat}\n            Lng={CurrentLng}\n            visible={DefinerVis}\n            OnSumbit={OnPlaceDefinerSubmit}\n            OnClosed={() => {\n              setDefinerVis(false);\n            }}\n            message={DefinerMessage}\n          />\n        </div>\n      );\n    } else {\n      return <Spinner message={Error} />;\n    }\n  };\n\n  return MapInitialize();\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}